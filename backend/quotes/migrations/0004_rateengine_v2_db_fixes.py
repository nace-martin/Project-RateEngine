# Generated by Django 5.2.5 on 2025-09-23 10:00

from django.db import migrations, models, connection
import django.db.models.deletion


def install_btree_gist_extension(apps, schema_editor):
    """Install the btree_gist extension for exclusion constraints."""
    schema_editor.execute("CREATE EXTENSION IF NOT EXISTS btree_gist;")


def create_currencies_table(apps, schema_editor):
    """Create the currencies lookup table."""
    schema_editor.execute("""
        CREATE TABLE currencies (
            code CHAR(3) PRIMARY KEY,
            name TEXT NOT NULL,
            is_active BOOLEAN NOT NULL DEFAULT TRUE
        );
    """)


def create_units_table(apps, schema_editor):
    """Create the units lookup table."""
    schema_editor.execute("""
        CREATE TABLE units (
            code TEXT PRIMARY KEY,
            label TEXT NOT NULL
        );
    """)


def seed_currencies_and_units(apps, schema_editor):
    """Seed initial currency and unit data."""
    schema_editor.execute("""
        INSERT INTO currencies (code, name, is_active) VALUES
        ('PGK', 'Papua New Guinean Kina', TRUE),
        ('AUD', 'Australian Dollar', TRUE),
        ('USD', 'US Dollar', TRUE)
        ON CONFLICT (code) DO NOTHING;
    """)
    
    schema_editor.execute("""
        INSERT INTO units (code, label) VALUES
        ('KG', 'Kilogram'),
        ('CBM', 'Cubic Meter'),
        ('WM', 'Weight or Measurement'),
        ('EA', 'Each')
        ON CONFLICT (code) DO NOTHING;
    """)


def add_audience_id_fields(apps, schema_editor):
    """Add audience_id fields to organizations and pricing_policy tables."""
    schema_editor.execute("""
        ALTER TABLE organizations 
        ADD COLUMN IF NOT EXISTS audience_id BIGINT REFERENCES audiences(id);
    """)
    
    schema_editor.execute("""
        ALTER TABLE pricing_policy 
        ADD COLUMN IF NOT EXISTS audience_id BIGINT REFERENCES audiences(id);
    """)


def backfill_audience_ids(apps, schema_editor):
    """Backfill audience_id fields from text audience fields."""
    # This is a simplified backfill - in practice, this would need to map
    # the text audience values to actual audience IDs
    pass


def add_quotes_safety_flags(apps, schema_editor):
    """Add safety flags to quotes table."""
    schema_editor.execute("""
        ALTER TABLE quotes 
        ADD COLUMN IF NOT EXISTS is_incomplete BOOLEAN NOT NULL DEFAULT FALSE;
    """)
    
    schema_editor.execute("""
        ALTER TABLE quotes 
        ADD COLUMN IF NOT EXISTS incomplete_reason TEXT;
    """)


def add_quote_lines_side_field(apps, schema_editor):
    """Add side field to quote_lines table."""
    schema_editor.execute("""
        ALTER TABLE quote_lines 
        ADD COLUMN IF NOT EXISTS side TEXT CHECK (side IN ('BUY', 'SELL')) DEFAULT 'SELL';
    """)


def backfill_quote_lines_side(apps, schema_editor):
    """Backfill side field from is_buy/is_sell fields."""
    schema_editor.execute("""
        UPDATE quote_lines 
        SET side = CASE 
            WHEN is_buy = TRUE THEN 'BUY'
            WHEN is_sell = TRUE THEN 'SELL'
            ELSE 'SELL'
        END;
    """)


def update_quote_lines_precision(apps, schema_editor):
    """Update precision for quote_lines money fields."""
    # Note: In practice, changing precision might require more careful handling
    # depending on the existing data and database system
    pass


def add_jsonb_indexes(apps, schema_editor):
    """Add GIN indexes for JSONB columns."""
    schema_editor.execute("""
        CREATE INDEX IF NOT EXISTS quotes_req_snapshot_gin 
        ON quotes USING GIN (request_snapshot jsonb_path_ops);
    """)
    
    schema_editor.execute("""
        CREATE INDEX IF NOT EXISTS ratecard_fees_applies_if_gin 
        ON ratecard_fees USING GIN (applies_if jsonb_path_ops);
    """)
    
    schema_editor.execute("""
        CREATE INDEX IF NOT EXISTS service_items_conditions_gin 
        ON service_items USING GIN (conditions_json jsonb_path_ops);
    """)


def add_jsonb_checks(apps, schema_editor):
    """Add checks for required keys in JSONB columns."""
    schema_editor.execute("""
        ALTER TABLE ratecard_fees 
        ADD CONSTRAINT chk_applies_if_has_kind 
        CHECK (applies_if ? 'kind') NOT VALID;
    """)
    
    schema_editor.execute("""
        ALTER TABLE service_items 
        ADD CONSTRAINT chk_conditions_has_kind 
        CHECK (conditions_json ? 'kind') NOT VALID;
    """)


def add_uniqueness_constraints(apps, schema_editor):
    """Add missing uniqueness constraints."""
    schema_editor.execute("""
        ALTER TABLE route_legs 
        ADD CONSTRAINT route_legs_route_id_sequence_uniq 
        UNIQUE (route_id, sequence);
    """)
    
    schema_editor.execute("""
        ALTER TABLE stations 
        ADD CONSTRAINT chk_stations_iata_len 
        CHECK (length(iata) = 3 AND iata = upper(iata));
    """)


class Migration(migrations.Migration):

    dependencies = [
        ('quotes', '0003_quotelines_tax_pct'),
        ('pricing', '0005_remove_pricingpolicy_caf_on_fx_and_more'),
        ('organizations', '0001_initial'),
        ('core', '0001_initial'),
    ]

    operations = [
        # Install required extension
        migrations.RunPython(install_btree_gist_extension, reverse_code=migrations.RunPython.noop),
        
        # Create lookup tables
        migrations.RunPython(create_currencies_table, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_units_table, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(seed_currencies_and_units, reverse_code=migrations.RunPython.noop),
        
        # Add audience_id fields
        migrations.RunPython(add_audience_id_fields, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(backfill_audience_ids, reverse_code=migrations.RunPython.noop),
        
        # Add safety flags to quotes
        migrations.RunPython(add_quotes_safety_flags, reverse_code=migrations.RunPython.noop),
        
        # Add side field to quote_lines
        migrations.RunPython(add_quote_lines_side_field, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(backfill_quote_lines_side, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(update_quote_lines_precision, reverse_code=migrations.RunPython.noop),
        
        # Add JSONB indexes and checks
        migrations.RunPython(add_jsonb_indexes, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(add_jsonb_checks, reverse_code=migrations.RunPython.noop),
        
        # Add uniqueness constraints
        migrations.RunPython(add_uniqueness_constraints, reverse_code=migrations.RunPython.noop),
        
        # Note: FK constraints and exclusion constraints would be added in subsequent operations
        # after data validation
    ]