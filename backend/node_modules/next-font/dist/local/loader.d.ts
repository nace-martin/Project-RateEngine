type FontLoaderOptions = Omit<{
    functionName: string;
    variableName: string;
    data: any[];
    emitFontFile: (content: Buffer, ext: string, preload: boolean, isUsingSizeAdjust?: boolean) => string;
    resolve: (src: string) => string;
    isDev: boolean;
    isServer: boolean;
    loaderContext: any;
}, 'loaderContext'> & {
    loaderContext: {
        fs?: {
            readFile: (...args: any[]) => Promise<Buffer | Uint8Array | string>;
        };
        error: (message: string) => any;
    };
    cache?: {
        css?: Map<string, string | null>;
        font?: Map<string, string | null>;
    };
};
type FontLoader = (options: FontLoaderOptions) => Promise<{
    css: string;
    fallbackFonts?: string[];
    variable?: string;
    adjustFontFallback?: AdjustFontFallback;
    weight?: string;
    style?: string;
}>;
type AdjustFontFallback = {
    fallbackFont: string;
    ascentOverride?: string;
    descentOverride?: string;
    lineGapOverride?: string;
    sizeAdjust?: string;
};

declare const loader: FontLoader;

export { loader as default };
