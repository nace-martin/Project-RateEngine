import t from"node:fs/promises";import{validateLocalFontFunctionCall as e}from"./validate-local-font-function-call.js";let a=t=>{let e;return()=>(e||(e=t().then(t=>(e=t,t))),e)},o=a(()=>import("./get-fallback-metrics-from-font-file.js").then(t=>t.default||t)),l=a(()=>import("./pick-font-file-for-fallback-generation.js").then(t=>t.default||t)),f=a(()=>import("../fontkit.js").then(t=>t.default||t)),i=async({functionName:a,variableName:i,data:n,emitFontFile:r,resolve:s,loaderContext:m})=>{let c,{src:d,display:p,fallback:h,preload:u,variable:w,adjustFontFallback:y,declarations:g,weight:j,style:$}=e(a,n[0]),k=await Promise.all(d.map(async({path:e,style:a,weight:o,ext:l,format:n})=>{let c,d=s(e),h=Buffer.from(await (m.fs??t).readFile(d)),w=r(h,l,u,void 0===y||!!y),k=await f();try{c=k(h)}catch(t){console.error(`Failed to load font file: ${d}
${t}`)}let F=g?.some(({prop:t})=>"font-family"===t),b=[...g?g.map(({prop:t,value:e})=>[t,e]):[],...F?[]:[["font-family",i]],["src",`url(${w}) format('${n}')`],["font-display",p],...o??j?[["font-weight",o??j]]:[],...a??$?[["font-style",a??$]]:[]];return{css:`@font-face {
${b.map(([t,e])=>`${t}: ${e};`).join("\n")}
}
`,fontMetadata:c,weight:o,style:a}}));if(!1!==y){let{pickFontFileForFallbackGeneration:t}=await l(),e=t(k);if(e.fontMetadata){let{getFallbackMetricsFromFontFile:t}=await o();c=t(e.fontMetadata,"Times New Roman"===y?"serif":"sans-serif")}}return{css:k.map(({css:t})=>t).join("\n"),fallbackFonts:h,weight:1===d.length?d[0].weight:void 0,style:1===d.length?d[0].style:void 0,variable:w,adjustFontFallback:c}};export{i as default};
