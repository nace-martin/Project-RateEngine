import { CssVariable, Display, NextFont, NextFontWithVariable } from '../types';

/**
 * This is an autogenerated file by scripts/update-google-fonts.js
 */

declare function ABeeZee<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function ADLaM_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'adlam' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function AR_One_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'ARRR'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Abel<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Abhaya_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aboreto<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Abril_Fatface<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Abyssinica_SIL<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'ethiopic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aclonica<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Acme<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Actor<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Adamina<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Advent_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Afacad<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Afacad_Flux<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'slnt'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Agbalumo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'ethiopic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Agdasima<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Agu_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'MORF'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aguafina_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Akatab<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | '900' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tifinagh'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Akaya_Kanadaka<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Akaya_Telivigala<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Akronim<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Akshar<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aladin<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alata<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alatsi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Albert_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aldrich<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alef<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alegreya<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alegreya_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | '800' | '900' | Array<'400' | '500' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alegreya_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '500' | '700' | '800' | '900' | Array<'100' | '300' | '400' | '500' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alegreya_Sans_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '500' | '700' | '800' | '900' | Array<'100' | '300' | '400' | '500' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aleo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alex_Brush<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alexandria<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alfa_Slab_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alice<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alike<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alike_Angular<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alkalami<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alkatra<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'devanagari' | 'latin' | 'latin-ext' | 'oriya'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Allan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Allerta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Allerta_Stencil<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Allison<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Allura<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Almarai<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | '800' | Array<'300' | '400' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Almendra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Almendra_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Almendra_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alumni_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alumni_Sans_Collegiate_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alumni_Sans_Inline_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alumni_Sans_Pinstripe<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Alumni_Sans_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amarante<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amaranth<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amatic_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amethysta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amiko<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '600' | '700' | Array<'400' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amiri<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amiri_Quran<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Amita<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anaheim<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ancizar_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ancizar_Serif<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Andada_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Andika<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Bangla<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Devanagari<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Gujarati<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Gurmukhi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Kannada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Latin<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Malayalam<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'malayalam'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Odia<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'oriya'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Tamil<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anek_Telugu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Angkor<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Annapurna_SIL<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Annie_Use_Your_Telescope<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anonymous_Pro<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Antic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Antic_Didone<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Antic_Slab<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anton<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anton_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Antonio<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anuphan<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Anybody<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aoboshi_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arapey<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arbutus<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arbutus_Slab<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Architects_Daughter<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Archivo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Archivo_Black<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Archivo_Narrow<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Are_You_Serious<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aref_Ruqaa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aref_Ruqaa_Ink<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arima<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'malayalam' | 'tamil' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arimo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arizonia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Armata<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arsenal<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arsenal_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Artifika<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arvo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Arya<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Asap<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Asap_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Asar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Asset<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Assistant<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Asta_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Astloch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Asul<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Athiti<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Atkinson_Hyperlegible<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Atkinson_Hyperlegible_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Atkinson_Hyperlegible_Next<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Atma<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Atomic_Age<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Aubrey<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Audiowide<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Autour_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Average<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Average_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Averia_Gruesa_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Averia_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Averia_Sans_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Averia_Serif_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Azeret_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function B612<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function B612_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BIZ_UDGothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BIZ_UDMincho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BIZ_UDPGothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BIZ_UDPMincho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Babylonica<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bacasime_Antique<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bad_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Badeen_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bagel_Fat_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bahiana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bahianita<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bai_Jamjuree<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bakbak_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ballet<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Bhai_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Bhaijaan_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Bhaina_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'oriya' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Chettan_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'malayalam' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Da_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Paaji_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Tamma_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Tammudu_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baloo_Thambi_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Balsamiq_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Balthazar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bangers<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Barlow<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Barlow_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Barlow_Semi_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Barriecito<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Barrio<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Basic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baskervville<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baskervville_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Battambang<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '700' | '900' | Array<'100' | '300' | '400' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Baumans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bayon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Be_Vietnam_Pro<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Beau_Rivage<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bebas_Neue<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Beiruti<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Belanosima<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '600' | '700' | Array<'400' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Belgrano<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bellefair<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Belleza<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bellota<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bellota_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BenchNine<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Benne<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bentham<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Berkshire_Swash<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Besley<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Beth_Ellen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bevan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BhuTuka_Expanded_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Big_Shoulders<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Big_Shoulders_Inline<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Big_Shoulders_Stencil<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bigelow_Rules<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bigshot_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bilbo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bilbo_Swash_Caps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BioRhyme<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function BioRhyme_Expanded<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '700' | '800' | Array<'200' | '300' | '400' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Birthstone<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Birthstone_Bounce<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | Array<'400' | '500'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Biryani<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '600' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bitcount_Grid_Double<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: ('CRSV' | 'ELSH' | 'ELXP' | 'slnt')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bitter<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Black_And_White_Picture<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Black_Han_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Black_Ops_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Blaka<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Blaka_Hollow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Blaka_Ink<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Blinker<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bodoni_Moda<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bodoni_Moda_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bokor<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Boldonse<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bona_Nova<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bona_Nova_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bonbon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bonheur_Royale<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Boogaloo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Borel<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bowlby_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bowlby_One_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Braah_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Brawler<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bree_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bricolage_Grotesque<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bruno_Ace<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bruno_Ace_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Brygada_1918<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bubblegum_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bubbler_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Buda<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | Array<'300'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Buenard<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee_Hairline<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee_Inline<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee_Outline<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee_Shade<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee_Spice<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bungee_Tint<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Butcherman<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Butterfly_Kids<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Bytesized<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cabin<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cabin_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cabin_Sketch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cactus_Classical_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caesar_Dressing<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cagliostro<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cairo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
    axes?: 'slnt'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cairo_Play<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
    axes?: 'slnt'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cal_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caladea<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Calistoga<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Calligraffitti<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cambay<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cambo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Candal<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cantarell<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cantata_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cantora_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caprasimo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Capriola<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caramel<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Carattere<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cardo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gothic' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'old-italic' | 'runic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Carlito<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Carme<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Carrois_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Carrois_Gothic_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Carter_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cascadia_Code<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'braille' | 'cyrillic' | 'cyrillic-ext' | 'greek' | 'hebrew' | 'latin' | 'latin-ext' | 'symbols2' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cascadia_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'braille' | 'cyrillic' | 'cyrillic-ext' | 'greek' | 'hebrew' | 'latin' | 'latin-ext' | 'symbols2' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Castoro<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Castoro_Titling<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Catamaran<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caudex<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'runic' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caveat<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Caveat_Brush<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cedarville_Cursive<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ceviche_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chakra_Petch<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Changa<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Changa_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chango<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Charis_SIL<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Charm<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Charmonman<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chathura<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '700' | '800' | Array<'100' | '300' | '400' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chau_Philomene_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chela_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chelsea_Market<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chenla<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cherish<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cherry_Bomb_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cherry_Cream_Soda<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cherry_Swash<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chewy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chicle<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chilanka<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'malayalam'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chiron_Hei_HK<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'symbols2' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chiron_Sung_HK<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'symbols2' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chivo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chivo_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chocolate_Classical_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chokokutai<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Chonburi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cinzel<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cinzel_Decorative<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '900' | Array<'400' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Clicker_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Climate_Crisis<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'YEAR'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Coda<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '800' | Array<'400' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Codystar<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | Array<'300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Coiny<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Combo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Comfortaa<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Comforter<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Comforter_Brush<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Comic_Neue<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Comic_Relief<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Coming_Soon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Comme<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Commissioner<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('FLAR' | 'VOLM' | 'slnt')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Concert_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Condiment<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Content<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Contrail_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Convergence<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cookie<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Copse<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Coral_Pixels<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Corben<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Corinthia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cormorant<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cormorant_Garamond<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cormorant_Infant<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cormorant_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cormorant_Unicase<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cormorant_Upright<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Courgette<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Courier_Prime<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cousine<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Coustard<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '900' | Array<'400' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Covered_By_Your_Grace<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Crafty_Girls<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Creepster<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Crete_Round<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Crimson_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Crimson_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '600' | '700' | Array<'400' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Croissant_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Crushed<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cuprum<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cute_Font<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cutive<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Cutive_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function DM_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | Array<'300' | '400' | '500'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function DM_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function DM_Serif_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function DM_Serif_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dai_Banna_SIL<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'new-tai-lue'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Damion<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dancing_Script<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Danfo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'ELSH'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dangrek<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Darker_Grotesque<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Darumadrop_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function David_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dawning_of_a_New_Day<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Days_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dekko<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dela_Gothic_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Delicious_Handrawn<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Delius<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Delius_Swash_Caps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Delius_Unicase<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Della_Respira<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Denk_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Devonshire<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dhurjati<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Didact_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Diphylleia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Diplomata<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Diplomata_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Do_Hyeon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dokdo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Domine<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Donegal_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dongle<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Doppio_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dorsa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dosis<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function DotGothic16<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Doto<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'ROND'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dr_Sugiyama<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Duru_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function DynaPuff<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Dynalight<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function EB_Garamond<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Eagle_Lake<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function East_Sea_Dokdo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Eater<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Economica<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Eczar<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_AU_VIC_WA_NT_Arrows<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_AU_VIC_WA_NT_Dots<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_AU_VIC_WA_NT_Guides<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_AU_VIC_WA_NT_Hand<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_AU_VIC_WA_NT_Pre<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_NSW_ACT_Cursive<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_NSW_ACT_Foundation<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_NSW_ACT_Hand_Pre<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_QLD_Beginner<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_QLD_Hand<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_SA_Beginner<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_SA_Hand<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_TAS_Beginner<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_VIC_WA_NT_Beginner<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_VIC_WA_NT_Hand<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Edu_VIC_WA_NT_Hand_Pre<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function El_Messiri<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Electrolize<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Elsie<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '900' | Array<'400' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Elsie_Swash_Caps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '900' | Array<'400' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Emblema_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Emilys_Candy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Encode_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Encode_Sans_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Encode_Sans_Expanded<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Encode_Sans_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Encode_Sans_Semi_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Encode_Sans_Semi_Expanded<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Engagement<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Englebert<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Enriqueta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ephesis<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Epilogue<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Erica_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Esteban<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Estonia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Euphoria_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ewert<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Exile<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Exo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Exo_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Expletus_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Explora<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cherokee' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Faculty_Glyphic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fahkwang<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Familjen_Grotesk<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fanwood_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Farro<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '700' | Array<'300' | '400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Farsan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fascinate<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fascinate_Inline<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Faster_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fasthand<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fauna_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Faustina<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Federant<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Federo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Felipa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fenix<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Festive<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Figtree<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Finger_Paint<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Finlandica<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fira_Code<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fira_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fira_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fira_Sans_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fira_Sans_Extra_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fjalla_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fjord_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Flamenco<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | Array<'300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Flavors<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fleur_De_Leah<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Flow_Block<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Flow_Circular<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Flow_Rounded<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Foldit<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fondamento<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fontdiner_Swanky<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Forum<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fragment_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Francois_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Frank_Ruhl_Libre<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fraunces<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('SOFT' | 'WONK' | 'opsz')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Freckle_Face<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fredericka_the_Great<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fredoka<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Freehand<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Freeman<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fresca<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Frijole<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fruktur<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fugaz_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fuggles<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Funnel_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Funnel_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fustat<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Fuzzy_Bubbles<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function GFS_Didot<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'greek-ext' | 'latin' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function GFS_Neohellenic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'greek-ext' | 'latin' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ga_Maamli<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gabarito<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gabriela<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gaegu<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gafata<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gajraj_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Galada<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Galdeano<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Galindo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gamja_Flower<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gantari<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gasoek_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gayathri<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '400' | '700' | Array<'100' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'malayalam'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Geist<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Geist_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gelasio<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gemunu_Libre<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Genos<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cherokee' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gentium_Book_Plus<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gentium_Plus<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Geo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Geologica<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('CRSV' | 'SHRP' | 'slnt')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Georama<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Geostar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Geostar_Fill<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Germania_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gideon_Roman<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gidole<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gidugu<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gilda_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Girassol<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Give_You_Glory<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Glass_Antiqua<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Glegoo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gloock<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gloria_Hallelujah<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Glory<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gluten<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'slnt'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Goblin_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gochi_Hand<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Goldman<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Golos_Text<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gorditas<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gothic_A1<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gotu<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Goudy_Bookletter_1911<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gowun_Batang<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gowun_Dodum<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Graduate<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grand_Hotel<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grandiflora_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grandstander<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grape_Nuts<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gravitas_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Great_Vibes<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grechen_Fuemen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grenze<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grenze_Gotisch<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Grey_Qo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Griffy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gruppo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gudea<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gugi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gulzar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gupter<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gurajada<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Gwendolyn<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Habibi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hachi_Maru_Pop<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hahmlet<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Halant<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hammersmith_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hanalei<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hanalei_Fill<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Handjet<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'armenian' | 'cyrillic' | 'cyrillic-ext' | 'greek' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('ELGR' | 'ELSH')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Handlee<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hanken_Grotesk<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hanuman<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Happy_Monkey<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Harmattan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Headland_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hedvig_Letters_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hedvig_Letters_Serif<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Heebo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Henny_Penny<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hepta_Slab<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Herr_Von_Muellerhoff<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hi_Melody<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hina_Mincho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hind<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hind_Guntur<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hind_Madurai<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hind_Mysuru<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hind_Siliguri<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hind_Vadodara<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Holtwood_One_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Homemade_Apple<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Homenaje<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Honk<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
    axes?: ('MORF' | 'SHLN')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Host_Grotesk<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hubballi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hubot_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Huninn<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Hurricane<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_Arabic<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_Devanagari<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_Hebrew<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_JP<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_KR<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_Thai<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'thai'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Sans_Thai_Looped<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'thai'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IBM_Plex_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_DW_Pica<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_DW_Pica_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_Double_Pica<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_Double_Pica_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_English<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_English_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_French_Canon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_French_Canon_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_Great_Primer<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function IM_Fell_Great_Primer_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Iansui<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ibarra_Real_Nova<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Iceberg<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Iceland<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Imbue<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Imperial_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Imprima<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inclusive_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inconsolata<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inder<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Indie_Flower<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ingrid_Darling<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inika<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inknut_Antiqua<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inria_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inria_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inspiration<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Instrument_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Instrument_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inter<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Inter_Tight<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Irish_Grover<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Island_Moments<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Istok_Web<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Italiana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Italianno<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Itim<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacquard_12<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacquard_12_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacquard_24<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacquard_24_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacquarda_Bastarda_9<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacquarda_Bastarda_9_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacques_Francois<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jacques_Francois_Shadow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jaini<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jaini_Purva<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jaldi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jaro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_10<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_10_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_15<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_15_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_20<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_20_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_25<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jersey_25_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function JetBrains_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jim_Nightshade<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Joan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jockey_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jolly_Lodger<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jomhuria<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jomolhari<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'tibetan'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Josefin_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Josefin_Slab<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jost<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Joti_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jua<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Judson<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Julee<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Julius_Sans_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Junge<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Jura<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'kayah-li' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Just_Another_Hand<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Just_Me_Again_Down_Here<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function K2D<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kablammo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'emoji' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'MORF'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kadwa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kaisei_Decol<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kaisei_HarunoUmi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kaisei_Opti<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kaisei_Tokumin<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | '800' | Array<'400' | '500' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kalam<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kalnia<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kalnia_Glaze<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kameron<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kanchenjunga<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kirat-rai' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kanit<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kantumruy_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kapakana<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | 'variable' | Array<'300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Karantina<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Karla<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Karla_Tamil_Inclined<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Karla_Tamil_Upright<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Karma<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Katibeh<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kaushan_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kavivanar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kavoon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kay_Pho_Du<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kayah-li' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kdam_Thmor_Pro<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Keania_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kelly_Slab<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kenia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Khand<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Khmer<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Khula<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '600' | '700' | '800' | Array<'300' | '400' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kings<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kirang_Haerang<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kite_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kiwi_Maru<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | Array<'300' | '400' | '500'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Klee_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '600' | Array<'400' | '600'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Knewave<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function KoHo<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kodchasan<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kode_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Koh_Santepheap<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '700' | '900' | Array<'100' | '300' | '400' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kolker_Brush<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Konkhmer_Sleokchher<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kosugi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kosugi_Maru<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kotta_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Koulen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kranky<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kreon<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kristi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Krona_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Krub<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kufam<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kulim_Park<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '600' | '700' | Array<'200' | '300' | '400' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kumar_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kumar_One_Outline<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kumbh_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'YOPQ'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Kurale<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function LXGW_Marker_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'symbols2' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function LXGW_WenKai_Mono_TC<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'lisu' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function LXGW_WenKai_TC<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'lisu' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function La_Belle_Aurore<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Labrada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lacquer<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Laila<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lakki_Reddy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lalezar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lancelot<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Langar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lateef<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lato<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '700' | '900' | Array<'100' | '300' | '400' | '700' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lavishly_Yours<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function League_Gothic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function League_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function League_Spartan<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Leckerli_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ledger<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lekton<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lemon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lemonada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Deca<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Exa<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Giga<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Mega<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Peta<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Tera<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lexend_Zetta<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libertinus_Math<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'math' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libertinus_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_128<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_128_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_39<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_39_Extended<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_39_Extended_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_39_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Barcode_EAN13_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Baskerville<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Bodoni<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Caslon_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Caslon_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Libre_Franklin<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Licorice<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Life_Savers<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '800' | Array<'400' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lilita_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lily_Script_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Limelight<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Linden_Hill<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Linefont<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lisu_Bosa<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'lisu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Liter<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Literata<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Liu_Jian_Mao_Cao<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Livvic<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lobster<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lobster_Two<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Londrina_Outline<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Londrina_Shadow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Londrina_Sketch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Londrina_Solid<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '900' | Array<'100' | '300' | '400' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Long_Cang<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lora<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Love_Light<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Love_Ya_Like_A_Sister<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Loved_by_the_King<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lovers_Quarrel<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Luckiest_Guy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lugrasimo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lumanosimo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lunasima<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lusitana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Lustria<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Luxurious_Roman<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Luxurious_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function M_PLUS_1<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function M_PLUS_1_Code<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function M_PLUS_1p<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '500' | '700' | '800' | '900' | Array<'100' | '300' | '400' | '500' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function M_PLUS_2<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function M_PLUS_Code_Latin<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function M_PLUS_Rounded_1c<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '500' | '700' | '800' | '900' | Array<'100' | '300' | '400' | '500' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ma_Shan_Zheng<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Macondo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Macondo_Swash_Caps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Madimi_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Magra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Maiden_Orange<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Maitree<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Major_Mono_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mako<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mali<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mallanna<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Maname<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mandali<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Manjari<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '400' | '700' | Array<'100' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'malayalam'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Manrope<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mansalva<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Manuale<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Manufacturing_Consent<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marcellus<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marcellus_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marck_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Margarine<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marhey<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Markazi_Text<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marko_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marmelad<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Martel<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '600' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Martel_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '600' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Martian_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Marvel<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Matangi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mate<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mate_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Matemasie<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Maven_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function McLaren<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mea_Culpa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Meddon<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function MedievalSharp<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Medula_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Meera_Inimai<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Megrim<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Meie_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Menbere<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'ethiopic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Meow_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Merienda<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Merriweather<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Merriweather_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Metal<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Metal_Mania<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Metamorphous<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Metrophobic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Michroma<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Micro_5<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Micro_5_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Milonga<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Miltonian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Miltonian_Tattoo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mina<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mingzat<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'lepcha'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Miniver<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Miriam_Libre<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mirza<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Miss_Fajardose<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mitr<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mochiy_Pop_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mochiy_Pop_P_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Modak<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Modern_Antiqua<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Moderustic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mogra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mohave<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Moirai_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Molengo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Molle<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'italic' | Array<'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mona_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Monda<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Monofett<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Monomakh<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Monomaniac_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Monoton<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Monsieur_La_Doulaise<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Montaga<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Montagu_Slab<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function MonteCarlo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Montez<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Montserrat<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Montserrat_Alternates<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Montserrat_Underline<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Moo_Lah_Lah<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mooli<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Moon_Dance<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Moul<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Moulpali<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mountains_of_Christmas<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mouse_Memoirs<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mr_Bedfort<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mr_Dafoe<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mr_De_Haviland<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mrs_Saint_Delafield<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mrs_Sheppards<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ms_Madi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mukta<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mukta_Mahee<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mukta_Malar<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mukta_Vaani<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mulish<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Murecho<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function MuseoModerno<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function My_Soul<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mynerve<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Mystery_Quest<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function NTR<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nabla<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'math' | 'vietnamese'>;
    axes?: ('EDPT' | 'EHLT')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Namdhinggo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'limbu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nanum_Brush_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nanum_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '800' | Array<'400' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nanum_Gothic_Coding<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nanum_Myeongjo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '800' | Array<'400' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nanum_Pen_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Narnoor<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gunjala-gondi' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function National_Park<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Neonderthaw<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nerko_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Neucha<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Neuton<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '700' | '800' | Array<'200' | '300' | '400' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function New_Amsterdam<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function New_Rocker<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function New_Tegomin<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function News_Cycle<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Newsreader<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Niconne<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Niramit<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nixie_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nobile<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | Array<'400' | '500' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nokora<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Norican<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nosifer<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Notable<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nothing_You_Could_Do<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noticia_Text<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Color_Emoji<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'emoji'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Emoji<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'emoji'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Kufi_Arabic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Music<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'music'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Naskh_Arabic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Nastaliq_Urdu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Rashi_Hebrew<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'devanagari' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Adlam<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'adlam' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Adlam_Unjoined<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'adlam' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Anatolian_Hieroglyphs<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'anatolian-hieroglyphs' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Arabic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Armenian<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'armenian' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Avestan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'avestan' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Balinese<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'balinese' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Bamum<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bamum' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Bassa_Vah<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bassa-vah' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Batak<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'batak' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Bengali<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Bhaiksuki<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bhaiksuki' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Brahmi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'brahmi' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Buginese<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'buginese' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Buhid<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'buhid' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Canadian_Aboriginal<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'canadian-aboriginal' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Carian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'carian' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Caucasian_Albanian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'caucasian-albanian' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Chakma<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'chakma' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Cham<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cham' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Cherokee<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cherokee' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Chorasmian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'chorasmian' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Coptic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'coptic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Cuneiform<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cuneiform' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Cypriot<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cypriot' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Cypro_Minoan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cypro-minoan' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Deseret<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'deseret' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Devanagari<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Duployan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'duployan' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Egyptian_Hieroglyphs<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'egyptian-hieroglyphs' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Elbasan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'elbasan' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Elymaic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'elymaic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Ethiopic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'ethiopic' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Georgian<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'georgian' | 'greek-ext' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Glagolitic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'glagolitic' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gothic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Grantha<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'grantha' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Gujarati<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Gunjala_Gondi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gunjala-gondi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Gurmukhi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_HK<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Hanifi_Rohingya<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hanifi-rohingya' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Hanunoo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hanunoo' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Hatran<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hatran' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Hebrew<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Imperial_Aramaic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'imperial-aramaic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Indic_Siyaq_Numbers<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'indic-siyaq-numbers' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Inscriptional_Pahlavi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'inscriptional-pahlavi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Inscriptional_Parthian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'inscriptional-parthian' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_JP<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Javanese<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'javanese' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_KR<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Kaithi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kaithi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Kannada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Kawi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kawi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Kayah_Li<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kayah-li' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Kharoshthi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kharoshthi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Khmer<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Khojki<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khojki' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Khudawadi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khudawadi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Lao<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'lao' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Lao_Looped<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'lao' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Lepcha<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'lepcha'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Limbu<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'limbu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Linear_A<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'linear-a'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Linear_B<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'linear-b'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Lisu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'lisu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Lycian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'lycian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Lydian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'lydian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mahajani<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'mahajani'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Malayalam<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'malayalam'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mandaic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'mandaic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Manichaean<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'manichaean'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Marchen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'marchen'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Masaram_Gondi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'masaram-gondi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Math<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'math'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mayan_Numerals<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'mayan-numerals'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Medefaidrin<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'medefaidrin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Meetei_Mayek<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'meetei-mayek'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mende_Kikakui<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'mende-kikakui'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Meroitic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'meroitic' | 'meroitic-cursive' | 'meroitic-hieroglyphs'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Miao<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'miao'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Modi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'modi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mongolian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'mongolian' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Mro<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'mro'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Multani<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'multani'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Myanmar<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'myanmar'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_NKo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nko'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_NKo_Unjoined<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nko'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Nabataean<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nabataean'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Nag_Mundari<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nag-mundari'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Nandinagari<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nandinagari'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_New_Tai_Lue<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'new-tai-lue'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Newa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'newa'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Nushu<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nushu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Ogham<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'ogham'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Ol_Chiki<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'ol-chiki'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_Hungarian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-hungarian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_Italic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-italic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_North_Arabian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-north-arabian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_Permic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'old-permic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_Persian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-persian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_Sogdian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-sogdian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_South_Arabian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-south-arabian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Old_Turkic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-turkic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Oriya<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'oriya'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Osage<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'osage'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Osmanya<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'osmanya'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Pahawh_Hmong<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'pahawh-hmong'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Palmyrene<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'palmyrene'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Pau_Cin_Hau<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'pau-cin-hau'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_PhagsPa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'phags-pa' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Phoenician<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'phoenician'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Psalter_Pahlavi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'psalter-pahlavi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Rejang<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'rejang'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Runic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'runic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Samaritan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'samaritan'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Saurashtra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'saurashtra'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Sharada<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sharada'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Shavian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'shavian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Siddham<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'siddham'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_SignWriting<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'signwriting'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Sinhala<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Sogdian<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sogdian'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Sora_Sompeng<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sora-sompeng'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Soyombo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'soyombo'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Sundanese<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sundanese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Sunuwar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sunuwar'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Syloti_Nagri<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'syloti-nagri'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Symbols<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Symbols_2<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'braille' | 'latin' | 'latin-ext' | 'math' | 'mayan-numerals' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Syriac<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'syriac'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Syriac_Eastern<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'syriac'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_TC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tagalog<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tagalog'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tagbanwa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tagbanwa'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tai_Le<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tai-le'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tai_Tham<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tai-tham'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tai_Viet<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tai-viet'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Takri<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'takri'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tamil<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tamil_Supplement<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil-supplement'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tangsa<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tangsa'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Telugu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Thaana<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thaana'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Thai<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Thai_Looped<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tifinagh<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tifinagh'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Tirhuta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tirhuta'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Ugaritic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'ugaritic'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Vai<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vai'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Vithkuqi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vithkuqi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Wancho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'wancho'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Warang_Citi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'warang-citi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Yi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'yi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Sans_Zanabazar_Square<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'zanabazar-square'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'math' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Ahom<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'ahom' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Armenian<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'armenian' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Balinese<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'balinese' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Bengali<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Devanagari<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Dives_Akuru<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'dives-akuru' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Dogra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'dogra' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Ethiopic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'ethiopic' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Georgian<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'georgian' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Grantha<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'grantha' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Gujarati<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Gurmukhi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_HK<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Hebrew<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Hentaigana<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kana-extended' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_JP<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_KR<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Kannada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Khitan_Small_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khitan-small-script' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Khmer<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Khojki<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khojki' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Lao<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'lao' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Makasar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'makasar'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Malayalam<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'malayalam'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Myanmar<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'myanmar'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_NP_Hmong<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'nyiakeng-puachue-hmong'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Old_Uyghur<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'old-uyghur'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Oriya<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'oriya'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Ottoman_Siyaq<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'ottoman-siyaq-numbers'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Sinhala<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_TC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Tamil<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Tangut<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tangut'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Telugu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Thai<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Tibetan<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tibetan'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Todhri<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'todhri'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Toto<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'toto'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Vithkuqi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vithkuqi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Serif_Yezidi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'yezidi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Traditional_Nushu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'nushu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Noto_Znamenny_Musical_Notation<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'znamenny'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Cut<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Flat<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Oval<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Round<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Slim<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nova_Square<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Numans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nunito<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nunito_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('YTLC' | 'opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Nuosu_SIL<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'yi'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Odibee_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Odor_Mean_Chey<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Offside<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'tamil' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ojuju<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Old_Standard_TT<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oldenburg<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ole<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oleo_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oleo_Script_Swash_Caps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Onest<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oooh_Baby<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Open_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oranienbaum<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Orbit<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Orbitron<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oregano<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Orelega_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Orienta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Original_Surfer<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oswald<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Outfit<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Over_the_Rainbow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Overlock<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '900' | Array<'400' | '700' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Overlock_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Overpass<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Overpass_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ovo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oxanium<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oxygen<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Oxygen_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function PT_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function PT_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function PT_Sans_Caption<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function PT_Sans_Narrow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function PT_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function PT_Serif_Caption<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pacifico<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Padauk<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'myanmar'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Padyakke_Expanded_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Palanquin<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Palanquin_Dark<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Palette_Mosaic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pangolin<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Paprika<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Parastoo<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Parisienne<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Parkinsans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Passero_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Passion_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '900' | Array<'400' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Passions_Conflict<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pathway_Extreme<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pathway_Gothic_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Patrick_Hand<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Patrick_Hand_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pattaya<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Patua_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pavanam<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Paytone_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Peddana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Peralta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Permanent_Marker<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Petemoss<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Petit_Formal_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Petrona<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Phetsarath<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'lao'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Philosopher<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Phudu<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Piazzolla<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Piedra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pinyon_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pirata_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pixelify_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Plaster<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Platypi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Play<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playball<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playfair<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playfair_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playfair_Display_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '900' | Array<'400' | '700' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playpen_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'emoji' | 'greek' | 'latin' | 'latin-ext' | 'math' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playpen_Sans_Arabic<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'emoji' | 'latin' | 'latin-ext' | 'math'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playpen_Sans_Deva<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'emoji' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playpen_Sans_Hebrew<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'emoji' | 'hebrew' | 'latin' | 'latin-ext' | 'math'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playpen_Sans_Thai<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'emoji' | 'latin' | 'latin-ext' | 'math' | 'thai'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AR<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AR_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AT<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AT_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_NSW<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_NSW_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_QLD<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_QLD_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_SA<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_SA_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_TAS<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_TAS_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_VIC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_AU_VIC_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_BE_VLG<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_BE_VLG_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_BE_WAL<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_BE_WAL_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_BR<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_BR_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CA<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CA_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CL<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CL_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CO<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CO_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CU<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CU_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CZ<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_CZ_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_Grund<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_Grund_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_LA<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_LA_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_SAS<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_SAS_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_VA<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DE_VA_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DK_Loopet<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DK_Loopet_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DK_Uloopet<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_DK_Uloopet_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ES<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ES_Deco<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ES_Deco_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ES_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_FR_Moderne<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_FR_Moderne_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_FR_Trad<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_FR_Trad_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_GB_J<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_GB_J_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_GB_S<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_GB_S_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_HR<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_HR_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_HR_Lijeva<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_HR_Lijeva_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_HU<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_HU_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ID<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ID_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IE<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IE_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IN<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IN_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IS<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IS_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IT_Moderna<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IT_Moderna_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IT_Trad<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_IT_Trad_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_MX<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_MX_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NG_Modern<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NG_Modern_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NL<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NL_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NO<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NO_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NZ<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_NZ_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_PE<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_PE_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_PL<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_PL_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_PT<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_PT_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_RO<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_RO_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_SK<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_SK_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_TZ<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_TZ_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_US_Modern<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_US_Modern_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_US_Trad<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_US_Trad_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_VN<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_VN_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ZA<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | 'variable' | Array<'100' | '200' | '300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Playwrite_ZA_Guides<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Plus_Jakarta_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pochaevsk<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Podkova<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poetsen_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poiret_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poller_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poltawski_Nowy<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poly<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pompiere<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ponnala<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ponomar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pontano_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poor_Story<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Poppins<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Port_Lligat_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Port_Lligat_Slab<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Potta_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pragati_Narrow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Praise<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Prata<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Preahvihear<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Press_Start_2P<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Pridi<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Princess_Sofia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Prociono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Prompt<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Prosto_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Protest_Guerrilla<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Protest_Revolution<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Protest_Riot<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Protest_Strike<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Proza_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Public_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Puppies_Play<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Puritan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Purple_Purse<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Qahiri<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Quando<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Quantico<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Quattrocento<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Quattrocento_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Questrial<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Quicksand<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Quintessential<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Qwigley<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Qwitcher_Grypen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function REM<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Racing_Sans_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Radio_Canada<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'canadian-aboriginal' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Radio_Canada_Big<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Radley<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rajdhani<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rakkas<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Raleway<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Raleway_Dots<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ramabhadra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ramaraja<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rambla<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rammetto_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rampart_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ranchers<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rancho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ranga<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rasa<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rationale<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ravi_Prakash<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Readex_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'HEXP'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Recursive<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('CASL' | 'CRSV' | 'MONO' | 'slnt')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Red_Hat_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Red_Hat_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Red_Hat_Text<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Red_Rose<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Redacted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Redacted_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reddit_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reddit_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reddit_Sans_Condensed<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Redressed<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reem_Kufi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reem_Kufi_Fun<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reem_Kufi_Ink<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reenie_Beanie<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Reggae_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rethink_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Revalia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rhodium_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ribeye<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ribeye_Marrow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Righteous<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Risque<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Road_Rage<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Roboto<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Roboto_Condensed<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Roboto_Flex<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('GRAD' | 'XOPQ' | 'XTRA' | 'YOPQ' | 'YTAS' | 'YTDE' | 'YTFI' | 'YTLC' | 'YTUC' | 'opsz' | 'slnt' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Roboto_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Roboto_Serif<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('GRAD' | 'opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Roboto_Slab<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rochester<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rock_3D<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rock_Salt<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function RocknRoll_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rokkitt<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Romanesco<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ropa_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rosario<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rosarivo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rouge_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rowdies<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rozha_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_80s_Fade<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Beastly<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Broken_Fax<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Bubbles<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Burned<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Dirt<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Distressed<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Doodle_Shadow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Doodle_Triangles<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Gemstones<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Glitch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Glitch_Pop<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Iso<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Lines<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Maps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Marker_Hatch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Maze<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Microbe<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Mono_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Moonrocks<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Pixels<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Puddles<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Scribble<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Spray_Paint<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Storm<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Vinyl<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rubik_Wet_Paint<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ruda<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rufina<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ruge_Boogie<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ruluko<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rum_Raisin<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ruslan_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Russo_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ruthie<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ruwudu<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Rye<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function STIX_Two_Text<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function SUSE<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sacramento<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sahitya<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sail<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Saira<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Saira_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Saira_Extra_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Saira_Semi_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Saira_Stencil_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Salsa<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sanchez<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sancreek<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sankofa_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sansation<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sansita<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '800' | '900' | Array<'400' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sansita_Swashed<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sarabun<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sarala<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sarina<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sarpanch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | '900' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sassy_Frass<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Satisfy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Savate<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sawarabi_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sawarabi_Mincho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'braille' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Scada<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Scheherazade_New<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Schibsted_Grotesk<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Schoolbell<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Scope_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Seaweed_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Secular_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sedan<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sedan_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sedgwick_Ave<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sedgwick_Ave_Display<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sen<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Send_Flowers<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sevillana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Seymour_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shadows_Into_Light<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shadows_Into_Light_Two<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shafarik<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'glagolitic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shalimar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shantell_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('BNCE' | 'INFM' | 'SPAC')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shanti<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Share<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Share_Tech<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Share_Tech_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shippori_Antique<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shippori_Antique_B1<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shippori_Mincho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shippori_Mincho_B1<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shizuru<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shojumaru<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Short_Stack<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Shrikhand<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gujarati' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Siemreap<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sigmar<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sigmar_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Signika<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'GRAD'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Signika_Negative<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Silkscreen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Simonetta<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '900' | Array<'400' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Single_Day<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sintony<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sirin_Stencil<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Six_Caps<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sixtyfour<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: ('BLED' | 'SCAN')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sixtyfour_Convergence<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols'>;
    axes?: ('BLED' | 'SCAN' | 'XELA' | 'YELA')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Skranji<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Slabo_13px<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Slabo_27px<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Slackey<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Slackside_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Smokum<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Smooch<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Smooch_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Smythe<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sniglet<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '800' | Array<'400' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Snippet<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Snowburst_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sofadi_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sofia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sofia_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sofia_Sans_Condensed<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sofia_Sans_Extra_Condensed<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sofia_Sans_Semi_Condensed<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Solitreo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Solway<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '700' | '800' | Array<'300' | '400' | '500' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sometype_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Song_Myung<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'MONO'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sonsie_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sora<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sorts_Mill_Goudy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sour_Gummy<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Source_Code_Pro<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Source_Sans_3<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Source_Serif_4<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Space_Grotesk<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Space_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Special_Elite<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Special_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Special_Gothic_Condensed_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Special_Gothic_Expanded_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spectral<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spectral_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '600' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spicy_Rice<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spinnaker<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spirax<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Splash<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spline_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Spline_Sans_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Squada_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Square_Peg<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sree_Krushnadevaraya<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sriracha<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Srisakdi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Staatliches<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stalemate<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stalinist_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stardos_Stencil<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stick<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stick_No_Bills<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stint_Ultra_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stint_Ultra_Expanded<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stoke<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | Array<'300' | '400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Strait<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Style_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Stylish<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sue_Ellen_Francisco<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Suez_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sulphur_Point<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '700' | Array<'300' | '400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sumana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sunflower<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '500' | '700' | Array<'300' | '500' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sunshiney<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Supermercado_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Sura<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Suranna<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Suravaram<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Suwannaphum<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '700' | '900' | Array<'100' | '300' | '400' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Swanky_and_Moo_Moo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Syncopate<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Syne<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Syne_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Syne_Tactile<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tac_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tagesschrift<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tai_Heritage_Pro<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tai-viet' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tajawal<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '500' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tangerine<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tapestry<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Taprom<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'khmer' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tauri<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Taviraj<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Teachers<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Teko<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tektur<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Telex<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tenali_Ramakrishna<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tenor_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Text_Me_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Texturina<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'opsz'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Thasadith<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function The_Girl_Next_Door<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function The_Nautigal<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tienne<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | '900' | Array<'400' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tillana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '800' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tilt_Neon<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('XROT' | 'YROT')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tilt_Prism<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('XROT' | 'YROT')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tilt_Warp<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('XROT' | 'YROT')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Timmana<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tinos<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiny5<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Bangla<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'bengali' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Devanagari_Hindi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Devanagari_Marathi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Devanagari_Sanskrit<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Gurmukhi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'gurmukhi' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Kannada<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'kannada' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Tamil<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'tamil'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tiro_Telugu<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'telugu'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Titan_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Titillium_Web<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '600' | '700' | '900' | Array<'200' | '300' | '400' | '600' | '700' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tomorrow<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tourney<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Trade_Winds<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Train_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Triodion<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Trirong<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'thai' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Trispace<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Trocchi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Trochut<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Truculenta<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
    axes?: ('opsz' | 'wdth')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Trykker<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tsukimi_Rounded<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tuffy<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext' | 'phoenician'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Tulpen_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Turret_Road<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '500' | '700' | '800' | Array<'200' | '300' | '400' | '500' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Twinkle_Star<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ubuntu<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '700' | Array<'300' | '400' | '500' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ubuntu_Condensed<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ubuntu_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ubuntu_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
    axes?: 'wdth'[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ubuntu_Sans_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | 'variable' | Array<'400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'greek-ext' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Uchen<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'tibetan'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ultra<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Unbounded<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Uncial_Antiqua<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Underdog<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Unica_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function UnifrakturCook<T extends CssVariable | undefined = undefined>(options: {
    weight: '700' | Array<'700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function UnifrakturMaguntia<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Unkempt<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Unlock<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Unna<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function UoqMunThenKhung<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Updock<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Urbanist<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function VT323<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vampiro_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Varela<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Varela_Round<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'hebrew' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Varta<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vast_Shadow<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vazirmatn<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vesper_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '700' | '900' | Array<'400' | '500' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Viaoda_Libre<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vibes<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vibur<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Victor_Mono<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vidaloka<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Viga<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vina_Sans<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Voces<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Volkhov<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vollkorn<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vollkorn_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '600' | '700' | '900' | Array<'400' | '600' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Voltaire<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Vujahday_Script<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function WDXL_Lubrifont_JP_N<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function WDXL_Lubrifont_SC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function WDXL_Lubrifont_TC<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'symbols2'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Waiting_for_the_Sunrise<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wallpoet<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Walter_Turncoat<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Warnes<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Water_Brush<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Waterfall<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wavefont<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    fallback?: string[];
    adjustFontFallback?: boolean;
    axes?: ('ROND' | 'YELA')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wellfleet<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wendy_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Whisper<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function WindSong<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | Array<'400' | '500'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Winky_Rough<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Winky_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wire_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wittgenstein<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wix_Madefor_Display<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Wix_Madefor_Text<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | '500' | '600' | '700' | '800' | 'variable' | Array<'400' | '500' | '600' | '700' | '800'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Work_Sans<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'variable' | Array<'100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Workbench<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '400' | 'variable' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'math' | 'symbols'>;
    axes?: ('BLED' | 'SCAN')[];
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Xanh_Mono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yaldevi<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'sinhala'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yanone_Kaffeesatz<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '200' | '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'200' | '300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yantramanav<T extends CssVariable | undefined = undefined>(options: {
    weight: '100' | '300' | '400' | '500' | '700' | '900' | Array<'100' | '300' | '400' | '500' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yarndings_12<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yarndings_12_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yarndings_20<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yarndings_20_Charted<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'math' | 'symbols'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yatra_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'devanagari' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yellowtail<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yeon_Sung<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yeseva_One<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yesteryear<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yomogi<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Young_Serif<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yrsa<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '300' | '400' | '500' | '600' | '700' | 'variable' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ysabeau<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ysabeau_Infant<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ysabeau_Office<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Ysabeau_SC<T extends CssVariable | undefined = undefined>(options?: {
    weight?: '1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000' | 'variable' | Array<'1' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '1000'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'cyrillic-ext' | 'greek' | 'latin' | 'latin-ext' | 'math' | 'symbols' | 'vietnamese'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yuji_Boku<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yuji_Hentaigana_Akari<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yuji_Hentaigana_Akebono<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yuji_Mai<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yuji_Syuku<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Yusei_Magic<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function ZCOOL_KuaiLe<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function ZCOOL_QingKe_HuangYou<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function ZCOOL_XiaoWei<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zain<T extends CssVariable | undefined = undefined>(options: {
    weight: '200' | '300' | '400' | '700' | '800' | '900' | Array<'200' | '300' | '400' | '700' | '800' | '900'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'arabic' | 'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Antique<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Antique_Soft<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Dots<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Kaku_Gothic_Antique<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '700' | '900' | Array<'300' | '400' | '500' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Kaku_Gothic_New<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '700' | '900' | Array<'300' | '400' | '500' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Kurenaido<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Loop<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Maru_Gothic<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '700' | '900' | Array<'300' | '400' | '500' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Old_Mincho<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '500' | '600' | '700' | '900' | Array<'400' | '500' | '600' | '700' | '900'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'cyrillic' | 'greek' | 'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zen_Tokyo_Zoo<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zeyada<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zhi_Mang_Xing<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | Array<'400'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zilla_Slab<T extends CssVariable | undefined = undefined>(options: {
    weight: '300' | '400' | '500' | '600' | '700' | Array<'300' | '400' | '500' | '600' | '700'>;
    style?: 'normal' | 'italic' | Array<'normal' | 'italic'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;
declare function Zilla_Slab_Highlight<T extends CssVariable | undefined = undefined>(options: {
    weight: '400' | '700' | Array<'400' | '700'>;
    style?: 'normal' | Array<'normal'>;
    display?: Display;
    variable?: T;
    preload?: boolean;
    fallback?: string[];
    adjustFontFallback?: boolean;
    subsets?: Array<'latin' | 'latin-ext'>;
}): T extends undefined ? NextFont : NextFontWithVariable;

export { ABeeZee, ADLaM_Display, AR_One_Sans, Abel, Abhaya_Libre, Aboreto, Abril_Fatface, Abyssinica_SIL, Aclonica, Acme, Actor, Adamina, Advent_Pro, Afacad, Afacad_Flux, Agbalumo, Agdasima, Agu_Display, Aguafina_Script, Akatab, Akaya_Kanadaka, Akaya_Telivigala, Akronim, Akshar, Aladin, Alata, Alatsi, Albert_Sans, Aldrich, Alef, Alegreya, Alegreya_SC, Alegreya_Sans, Alegreya_Sans_SC, Aleo, Alex_Brush, Alexandria, Alfa_Slab_One, Alice, Alike, Alike_Angular, Alkalami, Alkatra, Allan, Allerta, Allerta_Stencil, Allison, Allura, Almarai, Almendra, Almendra_Display, Almendra_SC, Alumni_Sans, Alumni_Sans_Collegiate_One, Alumni_Sans_Inline_One, Alumni_Sans_Pinstripe, Alumni_Sans_SC, Amarante, Amaranth, Amatic_SC, Amethysta, Amiko, Amiri, Amiri_Quran, Amita, Anaheim, Ancizar_Sans, Ancizar_Serif, Andada_Pro, Andika, Anek_Bangla, Anek_Devanagari, Anek_Gujarati, Anek_Gurmukhi, Anek_Kannada, Anek_Latin, Anek_Malayalam, Anek_Odia, Anek_Tamil, Anek_Telugu, Angkor, Annapurna_SIL, Annie_Use_Your_Telescope, Anonymous_Pro, Anta, Antic, Antic_Didone, Antic_Slab, Anton, Anton_SC, Antonio, Anuphan, Anybody, Aoboshi_One, Arapey, Arbutus, Arbutus_Slab, Architects_Daughter, Archivo, Archivo_Black, Archivo_Narrow, Are_You_Serious, Aref_Ruqaa, Aref_Ruqaa_Ink, Arima, Arimo, Arizonia, Armata, Arsenal, Arsenal_SC, Artifika, Arvo, Arya, Asap, Asap_Condensed, Asar, Asset, Assistant, Asta_Sans, Astloch, Asul, Athiti, Atkinson_Hyperlegible, Atkinson_Hyperlegible_Mono, Atkinson_Hyperlegible_Next, Atma, Atomic_Age, Aubrey, Audiowide, Autour_One, Average, Average_Sans, Averia_Gruesa_Libre, Averia_Libre, Averia_Sans_Libre, Averia_Serif_Libre, Azeret_Mono, B612, B612_Mono, BIZ_UDGothic, BIZ_UDMincho, BIZ_UDPGothic, BIZ_UDPMincho, Babylonica, Bacasime_Antique, Bad_Script, Badeen_Display, Bagel_Fat_One, Bahiana, Bahianita, Bai_Jamjuree, Bakbak_One, Ballet, Baloo_2, Baloo_Bhai_2, Baloo_Bhaijaan_2, Baloo_Bhaina_2, Baloo_Chettan_2, Baloo_Da_2, Baloo_Paaji_2, Baloo_Tamma_2, Baloo_Tammudu_2, Baloo_Thambi_2, Balsamiq_Sans, Balthazar, Bangers, Barlow, Barlow_Condensed, Barlow_Semi_Condensed, Barriecito, Barrio, Basic, Baskervville, Baskervville_SC, Battambang, Baumans, Bayon, Be_Vietnam_Pro, Beau_Rivage, Bebas_Neue, Beiruti, Belanosima, Belgrano, Bellefair, Belleza, Bellota, Bellota_Text, BenchNine, Benne, Bentham, Berkshire_Swash, Besley, Beth_Ellen, Bevan, BhuTuka_Expanded_One, Big_Shoulders, Big_Shoulders_Inline, Big_Shoulders_Stencil, Bigelow_Rules, Bigshot_One, Bilbo, Bilbo_Swash_Caps, BioRhyme, BioRhyme_Expanded, Birthstone, Birthstone_Bounce, Biryani, Bitcount_Grid_Double, Bitter, Black_And_White_Picture, Black_Han_Sans, Black_Ops_One, Blaka, Blaka_Hollow, Blaka_Ink, Blinker, Bodoni_Moda, Bodoni_Moda_SC, Bokor, Boldonse, Bona_Nova, Bona_Nova_SC, Bonbon, Bonheur_Royale, Boogaloo, Borel, Bowlby_One, Bowlby_One_SC, Braah_One, Brawler, Bree_Serif, Bricolage_Grotesque, Bruno_Ace, Bruno_Ace_SC, Brygada_1918, Bubblegum_Sans, Bubbler_One, Buda, Buenard, Bungee, Bungee_Hairline, Bungee_Inline, Bungee_Outline, Bungee_Shade, Bungee_Spice, Bungee_Tint, Butcherman, Butterfly_Kids, Bytesized, Cabin, Cabin_Condensed, Cabin_Sketch, Cactus_Classical_Serif, Caesar_Dressing, Cagliostro, Cairo, Cairo_Play, Cal_Sans, Caladea, Calistoga, Calligraffitti, Cambay, Cambo, Candal, Cantarell, Cantata_One, Cantora_One, Caprasimo, Capriola, Caramel, Carattere, Cardo, Carlito, Carme, Carrois_Gothic, Carrois_Gothic_SC, Carter_One, Cascadia_Code, Cascadia_Mono, Castoro, Castoro_Titling, Catamaran, Caudex, Caveat, Caveat_Brush, Cedarville_Cursive, Ceviche_One, Chakra_Petch, Changa, Changa_One, Chango, Charis_SIL, Charm, Charmonman, Chathura, Chau_Philomene_One, Chela_One, Chelsea_Market, Chenla, Cherish, Cherry_Bomb_One, Cherry_Cream_Soda, Cherry_Swash, Chewy, Chicle, Chilanka, Chiron_Hei_HK, Chiron_Sung_HK, Chivo, Chivo_Mono, Chocolate_Classical_Sans, Chokokutai, Chonburi, Cinzel, Cinzel_Decorative, Clicker_Script, Climate_Crisis, Coda, Codystar, Coiny, Combo, Comfortaa, Comforter, Comforter_Brush, Comic_Neue, Comic_Relief, Coming_Soon, Comme, Commissioner, Concert_One, Condiment, Content, Contrail_One, Convergence, Cookie, Copse, Coral_Pixels, Corben, Corinthia, Cormorant, Cormorant_Garamond, Cormorant_Infant, Cormorant_SC, Cormorant_Unicase, Cormorant_Upright, Courgette, Courier_Prime, Cousine, Coustard, Covered_By_Your_Grace, Crafty_Girls, Creepster, Crete_Round, Crimson_Pro, Crimson_Text, Croissant_One, Crushed, Cuprum, Cute_Font, Cutive, Cutive_Mono, DM_Mono, DM_Sans, DM_Serif_Display, DM_Serif_Text, Dai_Banna_SIL, Damion, Dancing_Script, Danfo, Dangrek, Darker_Grotesque, Darumadrop_One, David_Libre, Dawning_of_a_New_Day, Days_One, Dekko, Dela_Gothic_One, Delicious_Handrawn, Delius, Delius_Swash_Caps, Delius_Unicase, Della_Respira, Denk_One, Devonshire, Dhurjati, Didact_Gothic, Diphylleia, Diplomata, Diplomata_SC, Do_Hyeon, Dokdo, Domine, Donegal_One, Dongle, Doppio_One, Dorsa, Dosis, DotGothic16, Doto, Dr_Sugiyama, Duru_Sans, DynaPuff, Dynalight, EB_Garamond, Eagle_Lake, East_Sea_Dokdo, Eater, Economica, Eczar, Edu_AU_VIC_WA_NT_Arrows, Edu_AU_VIC_WA_NT_Dots, Edu_AU_VIC_WA_NT_Guides, Edu_AU_VIC_WA_NT_Hand, Edu_AU_VIC_WA_NT_Pre, Edu_NSW_ACT_Cursive, Edu_NSW_ACT_Foundation, Edu_NSW_ACT_Hand_Pre, Edu_QLD_Beginner, Edu_QLD_Hand, Edu_SA_Beginner, Edu_SA_Hand, Edu_TAS_Beginner, Edu_VIC_WA_NT_Beginner, Edu_VIC_WA_NT_Hand, Edu_VIC_WA_NT_Hand_Pre, El_Messiri, Electrolize, Elsie, Elsie_Swash_Caps, Emblema_One, Emilys_Candy, Encode_Sans, Encode_Sans_Condensed, Encode_Sans_Expanded, Encode_Sans_SC, Encode_Sans_Semi_Condensed, Encode_Sans_Semi_Expanded, Engagement, Englebert, Enriqueta, Ephesis, Epilogue, Erica_One, Esteban, Estonia, Euphoria_Script, Ewert, Exile, Exo, Exo_2, Expletus_Sans, Explora, Faculty_Glyphic, Fahkwang, Familjen_Grotesk, Fanwood_Text, Farro, Farsan, Fascinate, Fascinate_Inline, Faster_One, Fasthand, Fauna_One, Faustina, Federant, Federo, Felipa, Fenix, Festive, Figtree, Finger_Paint, Finlandica, Fira_Code, Fira_Mono, Fira_Sans, Fira_Sans_Condensed, Fira_Sans_Extra_Condensed, Fjalla_One, Fjord_One, Flamenco, Flavors, Fleur_De_Leah, Flow_Block, Flow_Circular, Flow_Rounded, Foldit, Fondamento, Fontdiner_Swanky, Forum, Fragment_Mono, Francois_One, Frank_Ruhl_Libre, Fraunces, Freckle_Face, Fredericka_the_Great, Fredoka, Freehand, Freeman, Fresca, Frijole, Fruktur, Fugaz_One, Fuggles, Funnel_Display, Funnel_Sans, Fustat, Fuzzy_Bubbles, GFS_Didot, GFS_Neohellenic, Ga_Maamli, Gabarito, Gabriela, Gaegu, Gafata, Gajraj_One, Galada, Galdeano, Galindo, Gamja_Flower, Gantari, Gasoek_One, Gayathri, Geist, Geist_Mono, Gelasio, Gemunu_Libre, Genos, Gentium_Book_Plus, Gentium_Plus, Geo, Geologica, Georama, Geostar, Geostar_Fill, Germania_One, Gideon_Roman, Gidole, Gidugu, Gilda_Display, Girassol, Give_You_Glory, Glass_Antiqua, Glegoo, Gloock, Gloria_Hallelujah, Glory, Gluten, Goblin_One, Gochi_Hand, Goldman, Golos_Text, Gorditas, Gothic_A1, Gotu, Goudy_Bookletter_1911, Gowun_Batang, Gowun_Dodum, Graduate, Grand_Hotel, Grandiflora_One, Grandstander, Grape_Nuts, Gravitas_One, Great_Vibes, Grechen_Fuemen, Grenze, Grenze_Gotisch, Grey_Qo, Griffy, Gruppo, Gudea, Gugi, Gulzar, Gupter, Gurajada, Gwendolyn, Habibi, Hachi_Maru_Pop, Hahmlet, Halant, Hammersmith_One, Hanalei, Hanalei_Fill, Handjet, Handlee, Hanken_Grotesk, Hanuman, Happy_Monkey, Harmattan, Headland_One, Hedvig_Letters_Sans, Hedvig_Letters_Serif, Heebo, Henny_Penny, Hepta_Slab, Herr_Von_Muellerhoff, Hi_Melody, Hina_Mincho, Hind, Hind_Guntur, Hind_Madurai, Hind_Mysuru, Hind_Siliguri, Hind_Vadodara, Holtwood_One_SC, Homemade_Apple, Homenaje, Honk, Host_Grotesk, Hubballi, Hubot_Sans, Huninn, Hurricane, IBM_Plex_Mono, IBM_Plex_Sans, IBM_Plex_Sans_Arabic, IBM_Plex_Sans_Condensed, IBM_Plex_Sans_Devanagari, IBM_Plex_Sans_Hebrew, IBM_Plex_Sans_JP, IBM_Plex_Sans_KR, IBM_Plex_Sans_Thai, IBM_Plex_Sans_Thai_Looped, IBM_Plex_Serif, IM_Fell_DW_Pica, IM_Fell_DW_Pica_SC, IM_Fell_Double_Pica, IM_Fell_Double_Pica_SC, IM_Fell_English, IM_Fell_English_SC, IM_Fell_French_Canon, IM_Fell_French_Canon_SC, IM_Fell_Great_Primer, IM_Fell_Great_Primer_SC, Iansui, Ibarra_Real_Nova, Iceberg, Iceland, Imbue, Imperial_Script, Imprima, Inclusive_Sans, Inconsolata, Inder, Indie_Flower, Ingrid_Darling, Inika, Inknut_Antiqua, Inria_Sans, Inria_Serif, Inspiration, Instrument_Sans, Instrument_Serif, Inter, Inter_Tight, Irish_Grover, Island_Moments, Istok_Web, Italiana, Italianno, Itim, Jacquard_12, Jacquard_12_Charted, Jacquard_24, Jacquard_24_Charted, Jacquarda_Bastarda_9, Jacquarda_Bastarda_9_Charted, Jacques_Francois, Jacques_Francois_Shadow, Jaini, Jaini_Purva, Jaldi, Jaro, Jersey_10, Jersey_10_Charted, Jersey_15, Jersey_15_Charted, Jersey_20, Jersey_20_Charted, Jersey_25, Jersey_25_Charted, JetBrains_Mono, Jim_Nightshade, Joan, Jockey_One, Jolly_Lodger, Jomhuria, Jomolhari, Josefin_Sans, Josefin_Slab, Jost, Joti_One, Jua, Judson, Julee, Julius_Sans_One, Junge, Jura, Just_Another_Hand, Just_Me_Again_Down_Here, K2D, Kablammo, Kadwa, Kaisei_Decol, Kaisei_HarunoUmi, Kaisei_Opti, Kaisei_Tokumin, Kalam, Kalnia, Kalnia_Glaze, Kameron, Kanchenjunga, Kanit, Kantumruy_Pro, Kapakana, Karantina, Karla, Karla_Tamil_Inclined, Karla_Tamil_Upright, Karma, Katibeh, Kaushan_Script, Kavivanar, Kavoon, Kay_Pho_Du, Kdam_Thmor_Pro, Keania_One, Kelly_Slab, Kenia, Khand, Khmer, Khula, Kings, Kirang_Haerang, Kite_One, Kiwi_Maru, Klee_One, Knewave, KoHo, Kodchasan, Kode_Mono, Koh_Santepheap, Kolker_Brush, Konkhmer_Sleokchher, Kosugi, Kosugi_Maru, Kotta_One, Koulen, Kranky, Kreon, Kristi, Krona_One, Krub, Kufam, Kulim_Park, Kumar_One, Kumar_One_Outline, Kumbh_Sans, Kurale, LXGW_Marker_Gothic, LXGW_WenKai_Mono_TC, LXGW_WenKai_TC, La_Belle_Aurore, Labrada, Lacquer, Laila, Lakki_Reddy, Lalezar, Lancelot, Langar, Lateef, Lato, Lavishly_Yours, League_Gothic, League_Script, League_Spartan, Leckerli_One, Ledger, Lekton, Lemon, Lemonada, Lexend, Lexend_Deca, Lexend_Exa, Lexend_Giga, Lexend_Mega, Lexend_Peta, Lexend_Tera, Lexend_Zetta, Libertinus_Math, Libertinus_Mono, Libre_Barcode_128, Libre_Barcode_128_Text, Libre_Barcode_39, Libre_Barcode_39_Extended, Libre_Barcode_39_Extended_Text, Libre_Barcode_39_Text, Libre_Barcode_EAN13_Text, Libre_Baskerville, Libre_Bodoni, Libre_Caslon_Display, Libre_Caslon_Text, Libre_Franklin, Licorice, Life_Savers, Lilita_One, Lily_Script_One, Limelight, Linden_Hill, Linefont, Lisu_Bosa, Liter, Literata, Liu_Jian_Mao_Cao, Livvic, Lobster, Lobster_Two, Londrina_Outline, Londrina_Shadow, Londrina_Sketch, Londrina_Solid, Long_Cang, Lora, Love_Light, Love_Ya_Like_A_Sister, Loved_by_the_King, Lovers_Quarrel, Luckiest_Guy, Lugrasimo, Lumanosimo, Lunasima, Lusitana, Lustria, Luxurious_Roman, Luxurious_Script, M_PLUS_1, M_PLUS_1_Code, M_PLUS_1p, M_PLUS_2, M_PLUS_Code_Latin, M_PLUS_Rounded_1c, Ma_Shan_Zheng, Macondo, Macondo_Swash_Caps, Mada, Madimi_One, Magra, Maiden_Orange, Maitree, Major_Mono_Display, Mako, Mali, Mallanna, Maname, Mandali, Manjari, Manrope, Mansalva, Manuale, Manufacturing_Consent, Marcellus, Marcellus_SC, Marck_Script, Margarine, Marhey, Markazi_Text, Marko_One, Marmelad, Martel, Martel_Sans, Martian_Mono, Marvel, Matangi, Mate, Mate_SC, Matemasie, Maven_Pro, McLaren, Mea_Culpa, Meddon, MedievalSharp, Medula_One, Meera_Inimai, Megrim, Meie_Script, Menbere, Meow_Script, Merienda, Merriweather, Merriweather_Sans, Metal, Metal_Mania, Metamorphous, Metrophobic, Michroma, Micro_5, Micro_5_Charted, Milonga, Miltonian, Miltonian_Tattoo, Mina, Mingzat, Miniver, Miriam_Libre, Mirza, Miss_Fajardose, Mitr, Mochiy_Pop_One, Mochiy_Pop_P_One, Modak, Modern_Antiqua, Moderustic, Mogra, Mohave, Moirai_One, Molengo, Molle, Mona_Sans, Monda, Monofett, Monomakh, Monomaniac_One, Monoton, Monsieur_La_Doulaise, Montaga, Montagu_Slab, MonteCarlo, Montez, Montserrat, Montserrat_Alternates, Montserrat_Underline, Moo_Lah_Lah, Mooli, Moon_Dance, Moul, Moulpali, Mountains_of_Christmas, Mouse_Memoirs, Mr_Bedfort, Mr_Dafoe, Mr_De_Haviland, Mrs_Saint_Delafield, Mrs_Sheppards, Ms_Madi, Mukta, Mukta_Mahee, Mukta_Malar, Mukta_Vaani, Mulish, Murecho, MuseoModerno, My_Soul, Mynerve, Mystery_Quest, NTR, Nabla, Namdhinggo, Nanum_Brush_Script, Nanum_Gothic, Nanum_Gothic_Coding, Nanum_Myeongjo, Nanum_Pen_Script, Narnoor, National_Park, Neonderthaw, Nerko_One, Neucha, Neuton, New_Amsterdam, New_Rocker, New_Tegomin, News_Cycle, Newsreader, Niconne, Niramit, Nixie_One, Nobile, Nokora, Norican, Nosifer, Notable, Nothing_You_Could_Do, Noticia_Text, Noto_Color_Emoji, Noto_Emoji, Noto_Kufi_Arabic, Noto_Music, Noto_Naskh_Arabic, Noto_Nastaliq_Urdu, Noto_Rashi_Hebrew, Noto_Sans, Noto_Sans_Adlam, Noto_Sans_Adlam_Unjoined, Noto_Sans_Anatolian_Hieroglyphs, Noto_Sans_Arabic, Noto_Sans_Armenian, Noto_Sans_Avestan, Noto_Sans_Balinese, Noto_Sans_Bamum, Noto_Sans_Bassa_Vah, Noto_Sans_Batak, Noto_Sans_Bengali, Noto_Sans_Bhaiksuki, Noto_Sans_Brahmi, Noto_Sans_Buginese, Noto_Sans_Buhid, Noto_Sans_Canadian_Aboriginal, Noto_Sans_Carian, Noto_Sans_Caucasian_Albanian, Noto_Sans_Chakma, Noto_Sans_Cham, Noto_Sans_Cherokee, Noto_Sans_Chorasmian, Noto_Sans_Coptic, Noto_Sans_Cuneiform, Noto_Sans_Cypriot, Noto_Sans_Cypro_Minoan, Noto_Sans_Deseret, Noto_Sans_Devanagari, Noto_Sans_Display, Noto_Sans_Duployan, Noto_Sans_Egyptian_Hieroglyphs, Noto_Sans_Elbasan, Noto_Sans_Elymaic, Noto_Sans_Ethiopic, Noto_Sans_Georgian, Noto_Sans_Glagolitic, Noto_Sans_Gothic, Noto_Sans_Grantha, Noto_Sans_Gujarati, Noto_Sans_Gunjala_Gondi, Noto_Sans_Gurmukhi, Noto_Sans_HK, Noto_Sans_Hanifi_Rohingya, Noto_Sans_Hanunoo, Noto_Sans_Hatran, Noto_Sans_Hebrew, Noto_Sans_Imperial_Aramaic, Noto_Sans_Indic_Siyaq_Numbers, Noto_Sans_Inscriptional_Pahlavi, Noto_Sans_Inscriptional_Parthian, Noto_Sans_JP, Noto_Sans_Javanese, Noto_Sans_KR, Noto_Sans_Kaithi, Noto_Sans_Kannada, Noto_Sans_Kawi, Noto_Sans_Kayah_Li, Noto_Sans_Kharoshthi, Noto_Sans_Khmer, Noto_Sans_Khojki, Noto_Sans_Khudawadi, Noto_Sans_Lao, Noto_Sans_Lao_Looped, Noto_Sans_Lepcha, Noto_Sans_Limbu, Noto_Sans_Linear_A, Noto_Sans_Linear_B, Noto_Sans_Lisu, Noto_Sans_Lycian, Noto_Sans_Lydian, Noto_Sans_Mahajani, Noto_Sans_Malayalam, Noto_Sans_Mandaic, Noto_Sans_Manichaean, Noto_Sans_Marchen, Noto_Sans_Masaram_Gondi, Noto_Sans_Math, Noto_Sans_Mayan_Numerals, Noto_Sans_Medefaidrin, Noto_Sans_Meetei_Mayek, Noto_Sans_Mende_Kikakui, Noto_Sans_Meroitic, Noto_Sans_Miao, Noto_Sans_Modi, Noto_Sans_Mongolian, Noto_Sans_Mono, Noto_Sans_Mro, Noto_Sans_Multani, Noto_Sans_Myanmar, Noto_Sans_NKo, Noto_Sans_NKo_Unjoined, Noto_Sans_Nabataean, Noto_Sans_Nag_Mundari, Noto_Sans_Nandinagari, Noto_Sans_New_Tai_Lue, Noto_Sans_Newa, Noto_Sans_Nushu, Noto_Sans_Ogham, Noto_Sans_Ol_Chiki, Noto_Sans_Old_Hungarian, Noto_Sans_Old_Italic, Noto_Sans_Old_North_Arabian, Noto_Sans_Old_Permic, Noto_Sans_Old_Persian, Noto_Sans_Old_Sogdian, Noto_Sans_Old_South_Arabian, Noto_Sans_Old_Turkic, Noto_Sans_Oriya, Noto_Sans_Osage, Noto_Sans_Osmanya, Noto_Sans_Pahawh_Hmong, Noto_Sans_Palmyrene, Noto_Sans_Pau_Cin_Hau, Noto_Sans_PhagsPa, Noto_Sans_Phoenician, Noto_Sans_Psalter_Pahlavi, Noto_Sans_Rejang, Noto_Sans_Runic, Noto_Sans_SC, Noto_Sans_Samaritan, Noto_Sans_Saurashtra, Noto_Sans_Sharada, Noto_Sans_Shavian, Noto_Sans_Siddham, Noto_Sans_SignWriting, Noto_Sans_Sinhala, Noto_Sans_Sogdian, Noto_Sans_Sora_Sompeng, Noto_Sans_Soyombo, Noto_Sans_Sundanese, Noto_Sans_Sunuwar, Noto_Sans_Syloti_Nagri, Noto_Sans_Symbols, Noto_Sans_Symbols_2, Noto_Sans_Syriac, Noto_Sans_Syriac_Eastern, Noto_Sans_TC, Noto_Sans_Tagalog, Noto_Sans_Tagbanwa, Noto_Sans_Tai_Le, Noto_Sans_Tai_Tham, Noto_Sans_Tai_Viet, Noto_Sans_Takri, Noto_Sans_Tamil, Noto_Sans_Tamil_Supplement, Noto_Sans_Tangsa, Noto_Sans_Telugu, Noto_Sans_Thaana, Noto_Sans_Thai, Noto_Sans_Thai_Looped, Noto_Sans_Tifinagh, Noto_Sans_Tirhuta, Noto_Sans_Ugaritic, Noto_Sans_Vai, Noto_Sans_Vithkuqi, Noto_Sans_Wancho, Noto_Sans_Warang_Citi, Noto_Sans_Yi, Noto_Sans_Zanabazar_Square, Noto_Serif, Noto_Serif_Ahom, Noto_Serif_Armenian, Noto_Serif_Balinese, Noto_Serif_Bengali, Noto_Serif_Devanagari, Noto_Serif_Display, Noto_Serif_Dives_Akuru, Noto_Serif_Dogra, Noto_Serif_Ethiopic, Noto_Serif_Georgian, Noto_Serif_Grantha, Noto_Serif_Gujarati, Noto_Serif_Gurmukhi, Noto_Serif_HK, Noto_Serif_Hebrew, Noto_Serif_Hentaigana, Noto_Serif_JP, Noto_Serif_KR, Noto_Serif_Kannada, Noto_Serif_Khitan_Small_Script, Noto_Serif_Khmer, Noto_Serif_Khojki, Noto_Serif_Lao, Noto_Serif_Makasar, Noto_Serif_Malayalam, Noto_Serif_Myanmar, Noto_Serif_NP_Hmong, Noto_Serif_Old_Uyghur, Noto_Serif_Oriya, Noto_Serif_Ottoman_Siyaq, Noto_Serif_SC, Noto_Serif_Sinhala, Noto_Serif_TC, Noto_Serif_Tamil, Noto_Serif_Tangut, Noto_Serif_Telugu, Noto_Serif_Thai, Noto_Serif_Tibetan, Noto_Serif_Todhri, Noto_Serif_Toto, Noto_Serif_Vithkuqi, Noto_Serif_Yezidi, Noto_Traditional_Nushu, Noto_Znamenny_Musical_Notation, Nova_Cut, Nova_Flat, Nova_Mono, Nova_Oval, Nova_Round, Nova_Script, Nova_Slim, Nova_Square, Numans, Nunito, Nunito_Sans, Nuosu_SIL, Odibee_Sans, Odor_Mean_Chey, Offside, Oi, Ojuju, Old_Standard_TT, Oldenburg, Ole, Oleo_Script, Oleo_Script_Swash_Caps, Onest, Oooh_Baby, Open_Sans, Oranienbaum, Orbit, Orbitron, Oregano, Orelega_One, Orienta, Original_Surfer, Oswald, Outfit, Over_the_Rainbow, Overlock, Overlock_SC, Overpass, Overpass_Mono, Ovo, Oxanium, Oxygen, Oxygen_Mono, PT_Mono, PT_Sans, PT_Sans_Caption, PT_Sans_Narrow, PT_Serif, PT_Serif_Caption, Pacifico, Padauk, Padyakke_Expanded_One, Palanquin, Palanquin_Dark, Palette_Mosaic, Pangolin, Paprika, Parastoo, Parisienne, Parkinsans, Passero_One, Passion_One, Passions_Conflict, Pathway_Extreme, Pathway_Gothic_One, Patrick_Hand, Patrick_Hand_SC, Pattaya, Patua_One, Pavanam, Paytone_One, Peddana, Peralta, Permanent_Marker, Petemoss, Petit_Formal_Script, Petrona, Phetsarath, Philosopher, Phudu, Piazzolla, Piedra, Pinyon_Script, Pirata_One, Pixelify_Sans, Plaster, Platypi, Play, Playball, Playfair, Playfair_Display, Playfair_Display_SC, Playpen_Sans, Playpen_Sans_Arabic, Playpen_Sans_Deva, Playpen_Sans_Hebrew, Playpen_Sans_Thai, Playwrite_AR, Playwrite_AR_Guides, Playwrite_AT, Playwrite_AT_Guides, Playwrite_AU_NSW, Playwrite_AU_NSW_Guides, Playwrite_AU_QLD, Playwrite_AU_QLD_Guides, Playwrite_AU_SA, Playwrite_AU_SA_Guides, Playwrite_AU_TAS, Playwrite_AU_TAS_Guides, Playwrite_AU_VIC, Playwrite_AU_VIC_Guides, Playwrite_BE_VLG, Playwrite_BE_VLG_Guides, Playwrite_BE_WAL, Playwrite_BE_WAL_Guides, Playwrite_BR, Playwrite_BR_Guides, Playwrite_CA, Playwrite_CA_Guides, Playwrite_CL, Playwrite_CL_Guides, Playwrite_CO, Playwrite_CO_Guides, Playwrite_CU, Playwrite_CU_Guides, Playwrite_CZ, Playwrite_CZ_Guides, Playwrite_DE_Grund, Playwrite_DE_Grund_Guides, Playwrite_DE_LA, Playwrite_DE_LA_Guides, Playwrite_DE_SAS, Playwrite_DE_SAS_Guides, Playwrite_DE_VA, Playwrite_DE_VA_Guides, Playwrite_DK_Loopet, Playwrite_DK_Loopet_Guides, Playwrite_DK_Uloopet, Playwrite_DK_Uloopet_Guides, Playwrite_ES, Playwrite_ES_Deco, Playwrite_ES_Deco_Guides, Playwrite_ES_Guides, Playwrite_FR_Moderne, Playwrite_FR_Moderne_Guides, Playwrite_FR_Trad, Playwrite_FR_Trad_Guides, Playwrite_GB_J, Playwrite_GB_J_Guides, Playwrite_GB_S, Playwrite_GB_S_Guides, Playwrite_HR, Playwrite_HR_Guides, Playwrite_HR_Lijeva, Playwrite_HR_Lijeva_Guides, Playwrite_HU, Playwrite_HU_Guides, Playwrite_ID, Playwrite_ID_Guides, Playwrite_IE, Playwrite_IE_Guides, Playwrite_IN, Playwrite_IN_Guides, Playwrite_IS, Playwrite_IS_Guides, Playwrite_IT_Moderna, Playwrite_IT_Moderna_Guides, Playwrite_IT_Trad, Playwrite_IT_Trad_Guides, Playwrite_MX, Playwrite_MX_Guides, Playwrite_NG_Modern, Playwrite_NG_Modern_Guides, Playwrite_NL, Playwrite_NL_Guides, Playwrite_NO, Playwrite_NO_Guides, Playwrite_NZ, Playwrite_NZ_Guides, Playwrite_PE, Playwrite_PE_Guides, Playwrite_PL, Playwrite_PL_Guides, Playwrite_PT, Playwrite_PT_Guides, Playwrite_RO, Playwrite_RO_Guides, Playwrite_SK, Playwrite_SK_Guides, Playwrite_TZ, Playwrite_TZ_Guides, Playwrite_US_Modern, Playwrite_US_Modern_Guides, Playwrite_US_Trad, Playwrite_US_Trad_Guides, Playwrite_VN, Playwrite_VN_Guides, Playwrite_ZA, Playwrite_ZA_Guides, Plus_Jakarta_Sans, Pochaevsk, Podkova, Poetsen_One, Poiret_One, Poller_One, Poltawski_Nowy, Poly, Pompiere, Ponnala, Ponomar, Pontano_Sans, Poor_Story, Poppins, Port_Lligat_Sans, Port_Lligat_Slab, Potta_One, Pragati_Narrow, Praise, Prata, Preahvihear, Press_Start_2P, Pridi, Princess_Sofia, Prociono, Prompt, Prosto_One, Protest_Guerrilla, Protest_Revolution, Protest_Riot, Protest_Strike, Proza_Libre, Public_Sans, Puppies_Play, Puritan, Purple_Purse, Qahiri, Quando, Quantico, Quattrocento, Quattrocento_Sans, Questrial, Quicksand, Quintessential, Qwigley, Qwitcher_Grypen, REM, Racing_Sans_One, Radio_Canada, Radio_Canada_Big, Radley, Rajdhani, Rakkas, Raleway, Raleway_Dots, Ramabhadra, Ramaraja, Rambla, Rammetto_One, Rampart_One, Ranchers, Rancho, Ranga, Rasa, Rationale, Ravi_Prakash, Readex_Pro, Recursive, Red_Hat_Display, Red_Hat_Mono, Red_Hat_Text, Red_Rose, Redacted, Redacted_Script, Reddit_Mono, Reddit_Sans, Reddit_Sans_Condensed, Redressed, Reem_Kufi, Reem_Kufi_Fun, Reem_Kufi_Ink, Reenie_Beanie, Reggae_One, Rethink_Sans, Revalia, Rhodium_Libre, Ribeye, Ribeye_Marrow, Righteous, Risque, Road_Rage, Roboto, Roboto_Condensed, Roboto_Flex, Roboto_Mono, Roboto_Serif, Roboto_Slab, Rochester, Rock_3D, Rock_Salt, RocknRoll_One, Rokkitt, Romanesco, Ropa_Sans, Rosario, Rosarivo, Rouge_Script, Rowdies, Rozha_One, Rubik, Rubik_80s_Fade, Rubik_Beastly, Rubik_Broken_Fax, Rubik_Bubbles, Rubik_Burned, Rubik_Dirt, Rubik_Distressed, Rubik_Doodle_Shadow, Rubik_Doodle_Triangles, Rubik_Gemstones, Rubik_Glitch, Rubik_Glitch_Pop, Rubik_Iso, Rubik_Lines, Rubik_Maps, Rubik_Marker_Hatch, Rubik_Maze, Rubik_Microbe, Rubik_Mono_One, Rubik_Moonrocks, Rubik_Pixels, Rubik_Puddles, Rubik_Scribble, Rubik_Spray_Paint, Rubik_Storm, Rubik_Vinyl, Rubik_Wet_Paint, Ruda, Rufina, Ruge_Boogie, Ruluko, Rum_Raisin, Ruslan_Display, Russo_One, Ruthie, Ruwudu, Rye, STIX_Two_Text, SUSE, Sacramento, Sahitya, Sail, Saira, Saira_Condensed, Saira_Extra_Condensed, Saira_Semi_Condensed, Saira_Stencil_One, Salsa, Sanchez, Sancreek, Sankofa_Display, Sansation, Sansita, Sansita_Swashed, Sarabun, Sarala, Sarina, Sarpanch, Sassy_Frass, Satisfy, Savate, Sawarabi_Gothic, Sawarabi_Mincho, Scada, Scheherazade_New, Schibsted_Grotesk, Schoolbell, Scope_One, Seaweed_Script, Secular_One, Sedan, Sedan_SC, Sedgwick_Ave, Sedgwick_Ave_Display, Sen, Send_Flowers, Sevillana, Seymour_One, Shadows_Into_Light, Shadows_Into_Light_Two, Shafarik, Shalimar, Shantell_Sans, Shanti, Share, Share_Tech, Share_Tech_Mono, Shippori_Antique, Shippori_Antique_B1, Shippori_Mincho, Shippori_Mincho_B1, Shizuru, Shojumaru, Short_Stack, Shrikhand, Siemreap, Sigmar, Sigmar_One, Signika, Signika_Negative, Silkscreen, Simonetta, Single_Day, Sintony, Sirin_Stencil, Six_Caps, Sixtyfour, Sixtyfour_Convergence, Skranji, Slabo_13px, Slabo_27px, Slackey, Slackside_One, Smokum, Smooch, Smooch_Sans, Smythe, Sniglet, Snippet, Snowburst_One, Sofadi_One, Sofia, Sofia_Sans, Sofia_Sans_Condensed, Sofia_Sans_Extra_Condensed, Sofia_Sans_Semi_Condensed, Solitreo, Solway, Sometype_Mono, Song_Myung, Sono, Sonsie_One, Sora, Sorts_Mill_Goudy, Sour_Gummy, Source_Code_Pro, Source_Sans_3, Source_Serif_4, Space_Grotesk, Space_Mono, Special_Elite, Special_Gothic, Special_Gothic_Condensed_One, Special_Gothic_Expanded_One, Spectral, Spectral_SC, Spicy_Rice, Spinnaker, Spirax, Splash, Spline_Sans, Spline_Sans_Mono, Squada_One, Square_Peg, Sree_Krushnadevaraya, Sriracha, Srisakdi, Staatliches, Stalemate, Stalinist_One, Stardos_Stencil, Stick, Stick_No_Bills, Stint_Ultra_Condensed, Stint_Ultra_Expanded, Stoke, Strait, Style_Script, Stylish, Sue_Ellen_Francisco, Suez_One, Sulphur_Point, Sumana, Sunflower, Sunshiney, Supermercado_One, Sura, Suranna, Suravaram, Suwannaphum, Swanky_and_Moo_Moo, Syncopate, Syne, Syne_Mono, Syne_Tactile, Tac_One, Tagesschrift, Tai_Heritage_Pro, Tajawal, Tangerine, Tapestry, Taprom, Tauri, Taviraj, Teachers, Teko, Tektur, Telex, Tenali_Ramakrishna, Tenor_Sans, Text_Me_One, Texturina, Thasadith, The_Girl_Next_Door, The_Nautigal, Tienne, Tillana, Tilt_Neon, Tilt_Prism, Tilt_Warp, Timmana, Tinos, Tiny5, Tiro_Bangla, Tiro_Devanagari_Hindi, Tiro_Devanagari_Marathi, Tiro_Devanagari_Sanskrit, Tiro_Gurmukhi, Tiro_Kannada, Tiro_Tamil, Tiro_Telugu, Titan_One, Titillium_Web, Tomorrow, Tourney, Trade_Winds, Train_One, Triodion, Trirong, Trispace, Trocchi, Trochut, Truculenta, Trykker, Tsukimi_Rounded, Tuffy, Tulpen_One, Turret_Road, Twinkle_Star, Ubuntu, Ubuntu_Condensed, Ubuntu_Mono, Ubuntu_Sans, Ubuntu_Sans_Mono, Uchen, Ultra, Unbounded, Uncial_Antiqua, Underdog, Unica_One, UnifrakturCook, UnifrakturMaguntia, Unkempt, Unlock, Unna, UoqMunThenKhung, Updock, Urbanist, VT323, Vampiro_One, Varela, Varela_Round, Varta, Vast_Shadow, Vazirmatn, Vesper_Libre, Viaoda_Libre, Vibes, Vibur, Victor_Mono, Vidaloka, Viga, Vina_Sans, Voces, Volkhov, Vollkorn, Vollkorn_SC, Voltaire, Vujahday_Script, WDXL_Lubrifont_JP_N, WDXL_Lubrifont_SC, WDXL_Lubrifont_TC, Waiting_for_the_Sunrise, Wallpoet, Walter_Turncoat, Warnes, Water_Brush, Waterfall, Wavefont, Wellfleet, Wendy_One, Whisper, WindSong, Winky_Rough, Winky_Sans, Wire_One, Wittgenstein, Wix_Madefor_Display, Wix_Madefor_Text, Work_Sans, Workbench, Xanh_Mono, Yaldevi, Yanone_Kaffeesatz, Yantramanav, Yarndings_12, Yarndings_12_Charted, Yarndings_20, Yarndings_20_Charted, Yatra_One, Yellowtail, Yeon_Sung, Yeseva_One, Yesteryear, Yomogi, Young_Serif, Yrsa, Ysabeau, Ysabeau_Infant, Ysabeau_Office, Ysabeau_SC, Yuji_Boku, Yuji_Hentaigana_Akari, Yuji_Hentaigana_Akebono, Yuji_Mai, Yuji_Syuku, Yusei_Magic, ZCOOL_KuaiLe, ZCOOL_QingKe_HuangYou, ZCOOL_XiaoWei, Zain, Zen_Antique, Zen_Antique_Soft, Zen_Dots, Zen_Kaku_Gothic_Antique, Zen_Kaku_Gothic_New, Zen_Kurenaido, Zen_Loop, Zen_Maru_Gothic, Zen_Old_Mincho, Zen_Tokyo_Zoo, Zeyada, Zhi_Mang_Xing, Zilla_Slab, Zilla_Slab_Highlight };
